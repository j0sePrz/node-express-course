1. In this lesson, you created a middleware function called asyncWrapper. Why?

 We wanted to limit the amount of code we have in our controllers tasks.js so we removed the try catch block and moved it into a middleware function that would do the work for us.


2. Suppose that you want to make sure that both a status code and and error message are send back to the user when they request the URL for a task that does not exist.
 Assume that youâ€™ve created a CustomAPIError class and an error handler that references that class. Complete the code:


 const getTask = asyncWrapper(async (req, res, next) => {
  const { id: taskID } = req.params;
  const task = await Task.findOne({ _id: taskID });
  if (!task) {
       return next(CustomAPIError(` URL does not exist : ${taskID}`,404))
  }
  res.status(200).json({ task });
});